/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import * as nestAccessControl from "nest-access-control";
import * as defaultAuthGuard from "../../auth/defaultAuth.guard";
import { TombolaService } from "../tombola.service";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { TombolaCreateInput } from "./TombolaCreateInput";
import { Tombola } from "./Tombola";
import { TombolaFindManyArgs } from "./TombolaFindManyArgs";
import { TombolaWhereUniqueInput } from "./TombolaWhereUniqueInput";
import { TombolaUpdateInput } from "./TombolaUpdateInput";
import { VoucherFindManyArgs } from "../../voucher/base/VoucherFindManyArgs";
import { Voucher } from "../../voucher/base/Voucher";
import { VoucherWhereUniqueInput } from "../../voucher/base/VoucherWhereUniqueInput";

@swagger.ApiBearerAuth()
@common.UseGuards(defaultAuthGuard.DefaultAuthGuard, nestAccessControl.ACGuard)
export class TombolaControllerBase {
  constructor(
    protected readonly service: TombolaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}
  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Tombola })
  @nestAccessControl.UseRoles({
    resource: "Tombola",
    action: "create",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async createTombola(
    @common.Body() data: TombolaCreateInput
  ): Promise<Tombola> {
    return await this.service.createTombola({
      data: data,
      select: {
        active: true,
        createdAt: true,
        drawDate: true,
        id: true,
        prize: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get()
  @swagger.ApiOkResponse({ type: [Tombola] })
  @ApiNestedQuery(TombolaFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Tombola",
    action: "read",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async tombolas(@common.Req() request: Request): Promise<Tombola[]> {
    const args = plainToClass(TombolaFindManyArgs, request.query);
    return this.service.tombolas({
      ...args,
      select: {
        active: true,
        createdAt: true,
        drawDate: true,
        id: true,
        prize: true,
        updatedAt: true,
      },
    });
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Tombola })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tombola",
    action: "read",
    possession: "own",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async tombola(
    @common.Param() params: TombolaWhereUniqueInput
  ): Promise<Tombola | null> {
    const result = await this.service.tombola({
      where: params,
      select: {
        active: true,
        createdAt: true,
        drawDate: true,
        id: true,
        prize: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Tombola })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tombola",
    action: "update",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async updateTombola(
    @common.Param() params: TombolaWhereUniqueInput,
    @common.Body() data: TombolaUpdateInput
  ): Promise<Tombola | null> {
    try {
      return await this.service.updateTombola({
        where: params,
        data: data,
        select: {
          active: true,
          createdAt: true,
          drawDate: true,
          id: true,
          prize: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Tombola })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  @nestAccessControl.UseRoles({
    resource: "Tombola",
    action: "delete",
    possession: "any",
  })
  @swagger.ApiForbiddenResponse({
    type: errors.ForbiddenException,
  })
  async deleteTombola(
    @common.Param() params: TombolaWhereUniqueInput
  ): Promise<Tombola | null> {
    try {
      return await this.service.deleteTombola({
        where: params,
        select: {
          active: true,
          createdAt: true,
          drawDate: true,
          id: true,
          prize: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @common.Get("/:id/vouchers")
  @ApiNestedQuery(VoucherFindManyArgs)
  @nestAccessControl.UseRoles({
    resource: "Voucher",
    action: "read",
    possession: "any",
  })
  async findVouchers(
    @common.Req() request: Request,
    @common.Param() params: TombolaWhereUniqueInput
  ): Promise<Voucher[]> {
    const query = plainToClass(VoucherFindManyArgs, request.query);
    const results = await this.service.findVouchers(params.id, {
      ...query,
      select: {
        code: true,
        createdAt: true,
        id: true,
        isValid: true,

        tombola: {
          select: {
            id: true,
          },
        },

        updatedAt: true,

        user: {
          select: {
            id: true,
          },
        },
      },
    });
    if (results === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return results;
  }

  @common.Post("/:id/vouchers")
  @nestAccessControl.UseRoles({
    resource: "Tombola",
    action: "update",
    possession: "any",
  })
  async connectVouchers(
    @common.Param() params: TombolaWhereUniqueInput,
    @common.Body() body: VoucherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vouchers: {
        connect: body,
      },
    };
    await this.service.updateTombola({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Patch("/:id/vouchers")
  @nestAccessControl.UseRoles({
    resource: "Tombola",
    action: "update",
    possession: "any",
  })
  async updateVouchers(
    @common.Param() params: TombolaWhereUniqueInput,
    @common.Body() body: VoucherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vouchers: {
        set: body,
      },
    };
    await this.service.updateTombola({
      where: params,
      data,
      select: { id: true },
    });
  }

  @common.Delete("/:id/vouchers")
  @nestAccessControl.UseRoles({
    resource: "Tombola",
    action: "update",
    possession: "any",
  })
  async disconnectVouchers(
    @common.Param() params: TombolaWhereUniqueInput,
    @common.Body() body: VoucherWhereUniqueInput[]
  ): Promise<void> {
    const data = {
      vouchers: {
        disconnect: body,
      },
    };
    await this.service.updateTombola({
      where: params,
      data,
      select: { id: true },
    });
  }
}
