/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { Tombola } from "./Tombola";
import { TombolaCountArgs } from "./TombolaCountArgs";
import { TombolaFindManyArgs } from "./TombolaFindManyArgs";
import { TombolaFindUniqueArgs } from "./TombolaFindUniqueArgs";
import { CreateTombolaArgs } from "./CreateTombolaArgs";
import { UpdateTombolaArgs } from "./UpdateTombolaArgs";
import { DeleteTombolaArgs } from "./DeleteTombolaArgs";
import { VoucherFindManyArgs } from "../../voucher/base/VoucherFindManyArgs";
import { Voucher } from "../../voucher/base/Voucher";
import { TombolaService } from "../tombola.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => Tombola)
export class TombolaResolverBase {
  constructor(
    protected readonly service: TombolaService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "Tombola",
    action: "read",
    possession: "any",
  })
  async _tombolasMeta(
    @graphql.Args() args: TombolaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [Tombola])
  @nestAccessControl.UseRoles({
    resource: "Tombola",
    action: "read",
    possession: "any",
  })
  async tombolas(
    @graphql.Args() args: TombolaFindManyArgs
  ): Promise<Tombola[]> {
    return this.service.tombolas(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => Tombola, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "Tombola",
    action: "read",
    possession: "own",
  })
  async tombola(
    @graphql.Args() args: TombolaFindUniqueArgs
  ): Promise<Tombola | null> {
    const result = await this.service.tombola(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tombola)
  @nestAccessControl.UseRoles({
    resource: "Tombola",
    action: "create",
    possession: "any",
  })
  async createTombola(
    @graphql.Args() args: CreateTombolaArgs
  ): Promise<Tombola> {
    return await this.service.createTombola({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => Tombola)
  @nestAccessControl.UseRoles({
    resource: "Tombola",
    action: "update",
    possession: "any",
  })
  async updateTombola(
    @graphql.Args() args: UpdateTombolaArgs
  ): Promise<Tombola | null> {
    try {
      return await this.service.updateTombola({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Tombola)
  @nestAccessControl.UseRoles({
    resource: "Tombola",
    action: "delete",
    possession: "any",
  })
  async deleteTombola(
    @graphql.Args() args: DeleteTombolaArgs
  ): Promise<Tombola | null> {
    try {
      return await this.service.deleteTombola(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.ResolveField(() => [Voucher], { name: "vouchers" })
  @nestAccessControl.UseRoles({
    resource: "Voucher",
    action: "read",
    possession: "any",
  })
  async findVouchers(
    @graphql.Parent() parent: Tombola,
    @graphql.Args() args: VoucherFindManyArgs
  ): Promise<Voucher[]> {
    const results = await this.service.findVouchers(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
