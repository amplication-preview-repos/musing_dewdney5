/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import {
  Prisma,
  Verification as PrismaVerification,
  User as PrismaUser,
} from "@prisma/client";

export class VerificationServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.VerificationCountArgs, "select">
  ): Promise<number> {
    return this.prisma.verification.count(args);
  }

  async verifications<T extends Prisma.VerificationFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.VerificationFindManyArgs>
  ): Promise<PrismaVerification[]> {
    return this.prisma.verification.findMany<Prisma.VerificationFindManyArgs>(
      args
    );
  }
  async verification<T extends Prisma.VerificationFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.VerificationFindUniqueArgs>
  ): Promise<PrismaVerification | null> {
    return this.prisma.verification.findUnique(args);
  }
  async createVerification<T extends Prisma.VerificationCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VerificationCreateArgs>
  ): Promise<PrismaVerification> {
    return this.prisma.verification.create<T>(args);
  }
  async updateVerification<T extends Prisma.VerificationUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.VerificationUpdateArgs>
  ): Promise<PrismaVerification> {
    return this.prisma.verification.update<T>(args);
  }
  async deleteVerification<T extends Prisma.VerificationDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.VerificationDeleteArgs>
  ): Promise<PrismaVerification> {
    return this.prisma.verification.delete(args);
  }

  async getUser(parentId: string): Promise<PrismaUser | null> {
    return this.prisma.verification
      .findUnique({
        where: { id: parentId },
      })
      .user();
  }
}
